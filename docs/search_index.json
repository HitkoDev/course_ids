[
["index.html", "Introduction to data science Preface", " Introduction to data science Tomaž Curk, Erik Štrumbelj 2019-02-22 Preface These are the course notes for the Introduction to data science course of the Data Science Master’s at University of Ljubljana, Faculty of computer and information science. "],
["python-programming-language.html", "Chapter 1 Python programming language 1.1 Basic characteristics 1.2 Why Python? 1.3 Setting up 1.4 Python in 15 minutes 1.5 Further reading and references 1.6 Learning outcomes 1.7 Practice problems", " Chapter 1 Python programming language 1.1 Basic characteristics Python is an interpreted, dynamically typed, object-oriented programming language. Advantages: Simple. Easy to learn. Extensive packages. Cross-platform. Free and open source. Large user base. Disadvantages: Being interpreted results in slower execution. Dynamic typing can lead to errors that only show up at runtime. Less suitable for mobile development and mobile computing. Higher memory consumption, less suitable for memory-intensive tasks. Underdeveloped database access layers. 1.2 Why Python? The Python language is one of the two most popular languages for data science (the other being R). The two main reasons are: The advantages of Python fit the typical data science workflow and its disadvantages are not that deterimental to the data science workflow. Python has a large ecosystem of packages, libraries and tools for data science, some of which are discussed later in this chapter. The typical data science workflow consists of acquiring and manipulating data and applying standard machine learning or statistical methods. In essence, the data flows through different methods. The emphasis is on obtaining results - extracting meaningful information from data. The advantages of Python are extremely beneficial to such a workflow: Being simple, easy to learn and free, it is accessible to a larger user base, including users with little or no prior programming experience. Being an interpreted language (and straightforward piecewise execution through read-eval-print loop shells or REPL) makes Python very flexible - multiple alternatives can be explored and quick decisions made on how to procede, depending on intermediary results. The disadvantages of Python are of minor consequence: The data science workflow is not time-critical - even an order-of-magnitude slowdown typically makes little difference. Code maintainability is less important - data science scripts are often short and discarded after use. Mobile development, mobile computing or enterprise-level database work are also not part of the typical data science workflow. 1.3 Setting up How to install Python? https://www.python.org/downloads/ Python IDE’s IDLE, PyCharm, ??? (brief descriptions with advantages/disadvantages) Python ecosystem for Data Science The Python ecosystem of libraries, frameworks, and tools is large and ever-growing. Python can be used for web scraping, machine learning, general scientific computing, and many other computing and scripting uses. Some of the most popular packages: scikit-learn - ??? Scipy - ??? Matplotlib - ??? Numpy - ??? ??? Some of the most popular tools: TensorFlow - Deep learning. ??? 1.4 Python in 15 minutes Hello world! print(&quot;Hello World!&quot;) ## Hello World! Variables and types Numbers and basic operators a = 3 b = 2.5 c = a + b c = a * b c = a / b Strings and concatenation a = &quot;data&quot; b = &#39;science&#39; # we can use double and single quotes c = a + &quot; &quot; + b print(c) ## data science Boolean a = True b = False Iterables: Lists, Tuples, Sets a = [1, 2, 3] # List a = (1, 2, 3) # Tuple (immutable) a = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;} # Set Dictionaries dict = { &quot;title&quot;: &quot;Introduction to Data Science&quot;, &quot;year&quot;: 1, &quot;semester&quot;: &quot;fall&quot;, &quot;classroom&quot;: &quot;P02&quot; } dict[&quot;classroom&quot;] = &quot;P03&quot; String formatting ??? More operators a = &quot;a&quot; print((a in {&quot;a&quot;, &quot;b&quot;} and True) or False) ## True print(not True) ## False Control flow If-then-else a = 2 if a &gt; 1: print(&#39;a is greater than 1&#39;) elif a == 1: print(&#39;a is equal to 1&#39;) else: print(&#39;a is less than 1&#39;) ## a is greater than 1 Loops for i in range(4, 6): print(i) ## 4 ## 5 people_list = [&#39;Ann&#39;, &#39;Bob&#39;, &#39;Charles&#39;] for person in people_list: print(person) ## Ann ## Bob ## Charles i = 1 while i &lt;= 3: print(i) i = i + 1 ## 1 ## 2 ## 3 1.4.1 Functions ??? 1.4.2 Classes and objects ??? 1.5 Further reading and references good books? references? online tutorials? quick reference sheets? anything that would help the students on the path to achieveing goals from previous section Python Tutorials: https://docs.python.org/3/tutorial/index.html 1.6 Learning outcomes Data science students should work towards obtaining the knowledge and the skills that enable them to: Use the Python programming language for common programming tasks, data manipulation, file I/0, etc. Identify the Python IDE(s) that best fit their requirements. Find suitable Python packages for the task at hand and use them. Recognize when Python is and when it is not a suitable language to use. 1.7 Practice problems some practice problems? (=homework) "],
["source-code-control.html", "Chapter 2 Source code control", " Chapter 2 Source code control Now let’s talk details. "],
["web-scraping.html", "Chapter 3 Web scraping", " Chapter 3 Web scraping Now let’s talk details. "],
["exploratory-data-analysis.html", "Chapter 4 Exploratory data analysis", " Chapter 4 Exploratory data analysis Now let’s talk details. "],
["dynamic-reports-and-reproducibility.html", "Chapter 5 Dynamic reports and reproducibility", " Chapter 5 Dynamic reports and reproducibility Now let’s talk details. "],
["more-exploratory-data-analysis.html", "Chapter 6 More exploratory data analysis", " Chapter 6 More exploratory data analysis Now let’s talk details. "],
["relational-databases.html", "Chapter 7 Relational databases", " Chapter 7 Relational databases Now let’s talk details. "],
["predictive-modelling.html", "Chapter 8 Predictive modelling", " Chapter 8 Predictive modelling Now let’s talk details. "],
["large-datasets-and-non-relational-databases.html", "Chapter 9 Large datasets and non relational databases", " Chapter 9 Large datasets and non relational databases Now let’s talk details. "],
["parallel-and-distributed-computing.html", "Chapter 10 Parallel and distributed computing", " Chapter 10 Parallel and distributed computing Now let’s talk details. "],
["who-intellectual-property-and-software-licenses.html", "Chapter 11 (who?) Intellectual property and software licenses", " Chapter 11 (who?) Intellectual property and software licenses Now let’s talk details. "],
["who-privacy-security-and-ethics.html", "Chapter 12 (who?) Privacy, security and ethics", " Chapter 12 (who?) Privacy, security and ethics Now let’s talk details. "],
["other-important-topics.html", "Chapter 13 Other important topics 13.1 Testing 13.2 R code 13.3 Python code", " Chapter 13 Other important topics These are optional, but it would be nice if we can get a visiting lecturer to cover them Effective/efficient communication (visual or otherwise) Specifics of data science project management 13.1 Testing \\[\\begin{equation*} \\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x) \\end{equation*}\\] \\[\\frac{x}{2}\\] Theorem 13.1 A labeled theorem here. See Theorem 13.1 R Core Team (2016) (R Core Team 2016) 13.2 R code x = rnorm(100) plot(x) 13.3 Python code library(reticulate) print(&quot;Hello World&quot;) ## Hello World a = 33 b = 33 if b &gt; a: print(&quot;b is greater than a&quot;) elif a == b: print(&quot;a and b are equal&quot;) ## a and b are equal References "],
["references.html", "References", " References "]
]
